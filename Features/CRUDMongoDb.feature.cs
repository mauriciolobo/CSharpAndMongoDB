// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Zona.Mongolizar.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CRUD Mongo DB")]
    public partial class CRUDMongoDBFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CRUDMongoDb.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "CRUD Mongo DB", "Digamos que eu sou um completo estupido\r\nE preciso fazer um CRUD\r\nMas utilizando " +
                    "o MongoDB", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inserção")]
        public virtual void Insercao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inserção", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DbName",
                        "CollectionName"});
            table1.AddRow(new string[] {
                        "DbTest",
                        "TestItens"});
#line 8
 testRunner.Given("configuração de conexão:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto"});
            table2.AddRow(new string[] {
                        "1",
                        "Valor A"});
            table2.AddRow(new string[] {
                        "2",
                        "Valor B"});
#line 11
 testRunner.When("insiro os dados", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto"});
            table3.AddRow(new string[] {
                        "1",
                        "Valor A"});
            table3.AddRow(new string[] {
                        "2",
                        "Valor B"});
#line 15
 testRunner.Then("devem existir os valores", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Atualizar")]
        public virtual void Atualizar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Atualizar", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DbName",
                        "CollectionName"});
            table4.AddRow(new string[] {
                        "DbTest",
                        "TestItens"});
#line 21
 testRunner.Given("configuração de conexão:", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto"});
            table5.AddRow(new string[] {
                        "1",
                        "Valor A"});
#line 24
  testRunner.And("existe o dado", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto",
                        "TextoNovo"});
            table6.AddRow(new string[] {
                        "1",
                        "Valor A",
                        "Novo Valor A"});
#line 27
 testRunner.When("troco para o valor", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto"});
            table7.AddRow(new string[] {
                        "1",
                        "Novo Valor A"});
#line 30
 testRunner.Then("novo valor deve ser", ((string)(null)), table7);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deletar")]
        public virtual void Deletar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deletar", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DbName",
                        "CollectionName"});
            table8.AddRow(new string[] {
                        "DbTest",
                        "TestItens"});
#line 35
 testRunner.Given("configuração de conexão:", ((string)(null)), table8);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Texto"});
            table9.AddRow(new string[] {
                        "1",
                        "Valor A"});
#line 38
  testRunner.And("existe o dado", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table10.AddRow(new string[] {
                        "1"});
#line 41
 testRunner.When("apago", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table11.AddRow(new string[] {
                        "1"});
#line 44
 testRunner.Then("o valor não deve existir", ((string)(null)), table11);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("InserirUmArquivo")]
        public virtual void InserirUmArquivo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("InserirUmArquivo", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DbName",
                        "CollectionName"});
            table12.AddRow(new string[] {
                        "DbTest",
                        "TestItens"});
#line 49
 testRunner.Given("configuração de conexão:", ((string)(null)), table12);
#line 52
  testRunner.And("um arquivo");
#line 53
 testRunner.When("salvo no banco com nome \"Teste.txt\"");
#line 54
 testRunner.Then("o arquivo \"Teste.txt\" deve estar armazenado");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
